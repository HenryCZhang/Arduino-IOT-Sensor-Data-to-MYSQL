#include <SPI.h>
#include <Ethernet.h>
#include "Wire.h" // This library allows you to communicate with I2C devices.

const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.

int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data

char tmp_str[7]; // temporary variable used in convert function

char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}

// replace the MAC address below by the MAC address printed on a sticker on the Arduino Shield 2
byte mac[] = {0xA8, 0x61, 0x0A, 0xAE, 0x94, 0xC9};

EthernetClient client;

int HTTP_PORT = 80;
String HTTP_METHOD = "GET";
char HOST_NAME[] = "192.168.0.113"; // change to your PC's IP address
String PATH_NAME = "/insert_acc.php";//change to the name of your php file

void setup(){
    Serial.begin(9600);
}

void loop()
{
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
  
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)

  
  // print out data
  Serial.print("aX = "); Serial.print(convert_int16_to_str(accelerometer_x));
  Serial.print(" | aY = "); Serial.print(convert_int16_to_str(accelerometer_y));
  Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(accelerometer_z));
  Serial.println();
  
  // delay
  delay(1000);
    // initialize the Ethernet shield using DHCP:
    if (Ethernet.begin(mac) == 0)
    {
        Serial.println("Failed to obtaining an IP address using DHCP");
        while (true)
            ;
    }

    // connect to web server on port 80:
    if (client.connect(HOST_NAME, HTTP_PORT))
    {
        // if connected:
        Serial.println("Connected to server");
        // make a HTTP request:
        // send HTTP header
        //something like http://192.168.0.113/insert_acc.php?acc_x=100&acc_y=100&acc_z=100
      
        client.println(HTTP_METHOD + " " + PATH_NAME + "?acc_x=" + String(accelerometer_x) + "&acc_y=" + String(accelerometer_y) + "&acc_z=" + String(accelerometer_z) + " HTTP/1.1");
        
        client.println("Host: " + String(HOST_NAME));
        client.println("Connection: close");
        client.println(); // end HTTP header

        while (client.connected())
        {
            if (client.available())
            {
                // read an incoming byte from the server and print it to serial monitor:
                char c = client.read();
                Serial.print(c);
            }
        }

        // the server's disconnected, stop the client:
        client.stop();
        Serial.println();
        Serial.println("disconnected");
    }
    else
    { // if not connected:
        Serial.println("connection failed");
    }

    // Sensor reading
//    Serial.begin(9600);
    Wire.begin();
    Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
    Wire.write(0x6B);                 // PWR_MGMT_1 register
    Wire.write(0);                    // set to zero (wakes up the MPU-6050)
    Wire.endTransmission(true);
}
